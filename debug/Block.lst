C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE BLOCK
OBJECT MODULE PLACED IN .\debug\Block.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE code\Block.C BROWSE DEBUG OBJECTEXTEND PRINT(.\debug\Block.lst) OBJECT(.\de
                    -bug\Block.obj)

stmt level    source

   1          /* Copyright (c) 2008 xpstudio, CaoXiangpeng
   2           * <xpstudio2003@yahoo.com.cn>
   3           * <http://xpstudio2003.blog.163.com>
   4           * <http://blog.ednchina.com/xpstudio2003>
   5           *
   6           * All rights reserved.
   7           *
   8           * Redistribution and use in source and binary forms, with or without modification,
   9           * are permitted provided that the following conditions are met:
  10           *
  11           * 1. Redistributions of source code must retain the above copyright notice,
  12           *    this list of conditions and the following disclaimer.
  13           * 2. Redistributions in binary form must reproduce the above copyright notice,
  14           *    this list of conditions and the following disclaimer in the documentation
  15           *    and/or other materials provided with the distribution.
  16           * 3. The name of the author may not be used to endorse or promote products
  17           *    derived from this software without specific prior written permission.
  18           *
  19           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  20           * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  21           * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  22           * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  23           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  24           * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26           * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  27           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  28           * OF SUCH DAMAGE.
  29           */
  30           
  31          /***********************************************************************/
  32          /*                                                                     */
  33          /*                           Block.C                                   */
  34          /*                                                                     */
  35          /*                       All rights reserved                           */
  36          /*                                                                     */
  37          /* Project : xp-Tetris Program Project                                 */
  38          /* IDE     : Keil uV2                                                  */
  39          /*                                                                     */
  40          /* Instruction: 1.some functions used when the Tetris is running       */
  41          /*              2.Basic-Drive File                                     */
  42          /*                                                                     */
  43          /* Date   : 13,Aug,2008                                                */
  44          /* Author : CaoXiangpeng xpstudio2008                                  */
  45          /*                                                                     */
  46          /*          latest modified: 13,Aug,2008 ,23:30                        */
  47          /***********************************************************************/
  48          
  49          #include "MCUREG.H"
  50          #include "SYSCONFIG.H"
  51          #include "RAMDisp.h"
  52          #include "DispROM.H"
  53          //#include "UART.H"
  54          
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 2   

  55          typedef struct
  56          {
  57              INT8U BlckIndex :4;     //对象序号0~6
  58              INT8U Status    :4;     //每个对象当前形状0~3
  59              INT8U code *  pPIC;     //对应于图形区的指针
  60              INT8U x,y;              //位置
  61          }TETRIS;
  62          
  63          TETRIS this;
  64          
  65          
  66          INT8U data BufChng[4][2];   //转换过程中的临时变量区
  67          INT8U TopLine = 1;          //保存整个区域最高的行(值最小)
  68          
  69          
  70          
  71          #define     ShortDly()      delayms(6)
  72          #define     LongDly()       Delay(20)
  73          
  74          //--------------------------------------------------------------
  75          
  76          
  77          /******************************************************************** 
  78          * 名称: void GetPicPointer()
  79          * 功能: 由对象 序号及状态 获得对象 图形区指针
  80          *
  81          * 作者: 曹香鹏,XPSTUDIO2008,12,Aug,2008
  82          ***********************************************************************/
  83          void GetPicPointer()
  84          {
  85   1          this.pPIC   = TtrsBlck
  86   1                      + TtrsBlckPoint[this.BlckIndex] 
  87   1                      + (this.Status) * 4;
  88   1      }
  89          /******************************************************************** 
  90          * 名称: INT8U ShowTetrisBlck()
  91          * 功能: 将相应的方块的图形写进RAM里去
  92          *       成功返回1,不成功返回0
  93          *
  94          * 作者: 曹香鹏,XPSTUDIO2008,12,Aug,2008
  95          ***********************************************************************/
  96          INT8U ShowTetrisBlck()
  97          {
  98   1          INT8U xtmp,Btmp;
  99   1          INT8U i;
 100   1      
 101   1          Btmp = this.x >> 3;     //取得图形对应的字节上..
 102   1          xtmp = this.x & 0x07;   //取得图形在对应字节上相对位置
 103   1      
 104   1          //修改RAM_BufChng
 105   1          for(i=0; i<4; i++)
 106   1          {
 107   2              if(xtmp <= 4)
 108   2              {
 109   3                  BufChng[i][0] = this.pPIC[i] << (4 - xtmp);
 110   3                  BufChng[i][1] = 0;
 111   3              }
 112   2              else// if(xtmp > 4)
 113   2              {
 114   3                  BufChng[i][0] = this.pPIC[i] >> (xtmp - 4);
 115   3                  BufChng[i][1] = this.pPIC[i] << (12 - xtmp);
 116   3              }        
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 3   

 117   2          }
 118   1      
 119   1          //检查RAM相应位置是否有图像
 120   1          for(i=0; i<4; i++)
 121   1          {
 122   2              if( (DisRAM[this.y + i][Btmp])   & (BufChng[i][0]) )
 123   2                  return FAILURE;
 124   2              if( (DisRAM[this.y + i][Btmp+1]) & (BufChng[i][1]) )
 125   2                  return FAILURE;
 126   2          }
 127   1      
 128   1          //将RAM_BUFFER写进RAM里去
 129   1          for(i=0; i<4; i++)
 130   1          {
 131   2              DisRAM[this.y + i][Btmp]    |= BufChng[i][0];
 132   2              DisRAM[this.y + i][Btmp+1]  |= BufChng[i][1];
 133   2          }
 134   1      
 135   1          return SUCCESS;
 136   1      }
 137          /******************************************************************** 
 138          * 名称: void ClearTetrisBlck()
 139          * 功能: 清除原来位置上的方块
 140          *           注意:没有去确认RAMBuff里的内容
 141          *
 142          * 作者: 曹香鹏,XPSTUDIO2008,12,Aug,2008
 143          ***********************************************************************/
 144          void ClearTetrisBlck()
 145          {
 146   1          INT8U Btmp;
 147   1          INT8U i;
 148   1          
 149   1          Btmp = this.x >> 3;     //取得图形对应的字节上..
 150   1          for(i=0; i<4; i++)
 151   1          {
 152   2              DisRAM[this.y + i][Btmp]    &= ~BufChng[i][0];
 153   2              DisRAM[this.y + i][Btmp+1]  &= ~BufChng[i][1];
 154   2          }
 155   1      }
 156          /******************************************************************** 
 157          * 名称: void ClearLine(INT8U line)
 158          * 功能: 清除一行
 159          *       
 160          *
 161          * 作者: 曹香鹏,XPSTUDIO2008,13,Aug,2008
 162          ***********************************************************************/
 163          void ClearLine(INT8U line)
 164          {
 165   1          #if TRS_X_BYTES >2
                  INT8U xtmp;
                  #endif
 168   1      
 169   1          for(; line>TopLine; line--)
 170   1          {
 171   2              //先把第一个字节的一部分清0
 172   2              DisRAM[line][TRS_X_BYTE_MIN] &= ~XBYTES_HEAD;
 173   2              DisRAM[line][TRS_X_BYTE_MIN] |= DisRAM[line-1][TRS_X_BYTE_MIN]
 174   2                                              & XBYTES_HEAD;
 175   2              //中间的直接赋值 
 176   2              #if TRS_X_BYTES >2
                      for(xtmp=TRS_X_BYTE_MIN+1 ; xtmp<TRS_X_BYTE_MAX;  xtmp++)
                      {
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 4   

                          DisRAM[line][xtmp] = DisRAM[line-1][xtmp];
                      }
                      #endif
 182   2      
 183   2              #if TRS_X_BYTES > 1
 184   2              //再把最后一个字节的一部分清0
 185   2              DisRAM[line][TRS_X_BYTE_MAX] &= ~XBYTES_END;
 186   2              DisRAM[line][TRS_X_BYTE_MAX] |= DisRAM[line-1][TRS_X_BYTE_MAX] 
 187   2                                              & XBYTES_END;
 188   2              #endif
 189   2      
 190   2          }
 191   1      }
 192          
 193          
 194          
 195          //  以上部分为子函数
 196          //--------------------------------------------------------------
 197          
 198          /******************************************************************** 
 199          * 名称: INT8U MoveLeft()
 200          * 功能: 当前方块向左移动一格
 201          *       成功返回SUCCESS,失败返回FAILURE
 202          *
 203          * 作者: 曹香鹏,XPSTUDIO2008,12,Aug,2008
 204          ***********************************************************************/
 205          INT8U MoveLeft()
 206          {
 207   1          #ifdef  CHECK_BOUND
                  //先检查是否越界
                  if(this.x - 1 <= TRS_X_MIN) return FAILURE;
                  #endif
 211   1      
 212   1          //先清除原来的图像
 213   1          ClearTetrisBlck(); 
 214   1      
 215   1          this.x -- ;
 216   1      
 217   1          if( ShowTetrisBlck() == FAILURE)
 218   1          {
 219   2              this.x ++ ;     //不能移动,返回原值
 220   2              ShowTetrisBlck();
 221   2              return FAILURE;
 222   2          }
 223   1          
 224   1          return SUCCESS;
 225   1      }
 226          
 227          
 228          /******************************************************************** 
 229          * 名称: INT8U MoveRight()
 230          * 功能: 当前方块向右移动一格
 231          *       成功返回SUCCESS,失败返回FAILURE
 232          *
 233          * 作者: 曹香鹏,XPSTUDIO2008,12,Aug,2008
 234          ***********************************************************************/
 235          INT8U MoveRight()
 236          {
 237   1          #ifdef  CHECK_BOUND
                  //先检查是否越界
                  if(this.x + 1 >= TRS_X_MAX) return FAILURE;    //test
                  #endif
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 5   

 241   1      
 242   1          //先清除原来的图像
 243   1          ClearTetrisBlck(); 
 244   1      
 245   1          this.x ++ ;
 246   1      
 247   1          if( ShowTetrisBlck() == FAILURE)
 248   1          {
 249   2              this.x -- ;     //不能移动,返回原值
 250   2              ShowTetrisBlck();
 251   2              return FAILURE;
 252   2          }
 253   1          
 254   1          return SUCCESS;
 255   1      }
 256          
 257          
 258          /******************************************************************** 
 259          * 名称: INT8U MoveDown()
 260          * 功能: 当前方块向下移动一格
 261          *       成功返回SUCCESS,失败返回FAILURE
 262          *
 263          * 作者: 曹香鹏,XPSTUDIO2008,13,Aug,2008
 264          ***********************************************************************/
 265          INT8U MoveDown()
 266          {
 267   1          #ifdef  CHECK_BOUND
                  //先检查是否越界
                  if(this.x + 1 > TRS_Y_MAX) return FAILURE;
                  #endif
 271   1      
 272   1          //先清除原来的图像
 273   1          ClearTetrisBlck(); 
 274   1      
 275   1          this.y ++ ;
 276   1      
 277   1          if( ShowTetrisBlck() == FAILURE)
 278   1          {
 279   2              this.y -- ;     //不能移动,返回原值
 280   2              ShowTetrisBlck();
 281   2      
 282   2              if(this.y < TopLine) TopLine = this.y;      //获得最高的点
 283   2      
 284   2              return FAILURE;
 285   2          }
 286   1          
 287   1          return SUCCESS;   
 288   1      }
 289          /******************************************************************** 
 290          * 名称: INT8U TurnStatus()
 291          * 功能: 方块转换状态
 292          *       成功返回SUCCESS,失败返回FAILURE
 293          *
 294          * 作者: 曹香鹏,XPSTUDIO2008,13,Aug,2008
 295          ***********************************************************************/
 296          INT8U TurnStatus()
 297          {
 298   1          INT8U StatusPrev;
 299   1      
 300   1          #ifdef  CHECK_BOUND
                  //先检查是否越界
                  if(this.x + 1 > TRS_Y_MAX) return FAILURE;
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 6   

                  #endif
 304   1      
 305   1          StatusPrev = this.Status;
 306   1      
 307   1          //先清除原来的图像
 308   1          ClearTetrisBlck(); 
 309   1      
 310   1          //状态转变
 311   1          this.Status ++;
 312   1          if(this.Status >= TtrsBlckStsNum[this.BlckIndex])
 313   1              this.Status = 0;
 314   1          GetPicPointer();            //重新获得图形指针
 315   1      
 316   1          if( ShowTetrisBlck() == FAILURE)
 317   1          {
 318   2              this.Status = StatusPrev;   //恢复原来状态
 319   2              GetPicPointer();            //重新获得图形指针
 320   2      
 321   2              ShowTetrisBlck();
 322   2              return FAILURE;
 323   2          }
 324   1          
 325   1          return SUCCESS;    
 326   1      }
 327          
 328          
 329          /******************************************************************** 
 330          * 名称: INT8U ClearAreaFull()
 331          * 功能: 检查一个区域内是否有全1的行,并删除全1的行
 332          *       返回删除的行数
 333          *
 334          * 作者: 曹香鹏,XPSTUDIO2008,13,Aug,2008
 335          ***********************************************************************/
 336          INT8U ClearAreaFull()
 337          {
 338   1          bit cFlag;
 339   1          INT8U ytmp;
 340   1          INT8U lines=0;        //保存一次清除的行数
 341   1      
 342   1          #if TRS_X_BYTES > 2
                  INT8U xtmp,Flag;
                  #endif
 345   1      
 346   1          for(ytmp = TRS_Y_MAX-1 ; ytmp>this.y; ytmp--)
 347   1          {
 348   2              cFlag = TRUE;
 349   2              //检查第一行是否全1
 350   2              if( (DisRAM[ytmp][TRS_X_BYTE_MIN] & XBYTES_HEAD) != XBYTES_HEAD ) cFlag = FALSE;
 351   2      
 352   2              //中间的直接检查    
 353   2              #if TRS_X_BYTES > 2
                      Flag=FALSE;
                      for(xtmp=TRS_X_BYTE_MIN+1 ; xtmp<TRS_X_BYTE_MAX;  xtmp++)
                      {
                          if( DisRAM[ytmp][xtmp] != 0xFF )
                          {
                              Flag=TRUE;
                              break;
                          }
                      }
                      if(Flag==TRUE)continue;
                      #endif  
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 7   

 365   2           
 366   2              #if TRS_X_BYTES > 1
 367   2              //检查最后一行是否全1
 368   2              if( (DisRAM[ytmp][TRS_X_BYTE_MAX] & XBYTES_END)  != XBYTES_END )  cFlag = FALSE;
 369   2              #endif
 370   2      
 371   2              //这一行满足条件
 372   2              if(cFlag == TRUE)
 373   2              {
 374   3                  lines++;
 375   3                  ClearLine(ytmp);
 376   3                  ytmp ++;
 377   3                  ShortDly();
 378   3              }    
 379   2          }
 380   1          return lines;
 381   1      }
 382          
 383          
 384          /******************************************************************** 
 385          * 名称: INT8U BlockGenerate()
 386          * 功能: 获得随机方块,及随机状态
 387          *       成功返回SUCCESS,
 388          * 注意: 这个函数应该使用随机数来生成方块,,这里没有使用,,,
 389          *       而是使用了循环生成的方法
 390          *
 391          * 作者: 曹香鹏,XPSTUDIO2008,13,Aug,2008
 392          ***********************************************************************/
 393          INT8U BlockGenerate()
 394          {
 395   1          static INT8U   X=0;
 396   1          this.x = ( TRS_X_MIN + TRS_X_MAX )>>1;
 397   1          this.y = TRS_Y_MIN+1;
 398   1          this.BlckIndex = (X++)%7;
 399   1          this.Status = 0;
 400   1      
 401   1          GetPicPointer();
 402   1          return ShowTetrisBlck();
 403   1      }
 404          
 405          
 406          /******************************************************************** 
 407          * 名称: void ClearTetrisScreen()
 408          * 功能: 清方块屏,,以供游戏开始
 409          *       
 410          *
 411          * 作者: 曹香鹏,XPSTUDIO2008,13,Aug,2008
 412          ***********************************************************************/
 413          void ClearTetrisScreen()
 414          {
 415   1          INT8U xtemp,ytemp;
 416   1      
 417   1          //取反
 418   1          for(ytemp = TRS_Y_MIN; ytemp <=TRS_Y_MAX; ytemp++)
 419   1          {
 420   2              for(xtemp = TRS_X_MIN; xtemp <=TRS_X_MAX; xtemp++)
 421   2              {
 422   3                  AntiPix(xtemp, ytemp);
 423   3              }
 424   2          }
 425   1          LongDly();
 426   1          //置1
C51 COMPILER V7.06   BLOCK                                                                 10/29/2008 14:40:47 PAGE 8   

 427   1          for(ytemp = TRS_Y_MIN; ytemp <=TRS_Y_MAX; ytemp++)
 428   1          {
 429   2              for(xtemp = TRS_X_MIN; xtemp <=TRS_X_MAX; xtemp++)
 430   2              {
 431   3                  SetPix(xtemp, ytemp);
 432   3              }
 433   2          }
 434   1          //清0
 435   1          for(ytemp = TRS_Y_MIN; ytemp <=TRS_Y_MAX; ytemp++)
 436   1          {
 437   2              for(xtemp = TRS_X_MIN; xtemp <=TRS_X_MAX; xtemp++)
 438   2              {
 439   3                  ClearPix(xtemp, ytemp);
 440   3              }
 441   2          }
 442   1          LongDly();LongDly();
 443   1          //绘边框
 444   1          for(xtemp =TRS_X_MAX; xtemp >TRS_X_MIN; xtemp--)
 445   1          {
 446   2              SetPix(xtemp, TRS_Y_MIN);   
 447   2          }
 448   1          for(ytemp = TRS_Y_MIN; ytemp <=TRS_Y_MAX; ytemp++)
 449   1          {
 450   2              SetPix(TRS_X_MIN, ytemp);   
 451   2          }
 452   1          for(xtemp = TRS_X_MIN; xtemp <=TRS_X_MAX; xtemp++)
 453   1          {
 454   2              SetPix(xtemp, TRS_Y_MAX);   
 455   2          }
 456   1          for(ytemp = TRS_Y_MAX; ytemp >0; ytemp--)
 457   1          {
 458   2              SetPix(TRS_X_MAX, ytemp);   
 459   2          }
 460   1      }
 461          
 462          
 463          //-----------------------------End of File-----------------------------//


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    922    ----
   CONSTANT SIZE    =    106    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
